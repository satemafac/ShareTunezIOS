"""
Django settings for rideTunes project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
python manage.py runserver
daphne rideTunes.asgi:application
celery -A rideTunes worker --loglevel=info
sudo nano ~/.bashrc

ssh -v -i ~/.ssh/id_rsa anustalanic@35.232.200.133
source env/bin/activate
python manage.py runserver
daphne rideTunes.asgi:application
daphne -b 127.0.0.1 -p 8001 rideTunes.asgi:application
daphne -u /tmp/daphne.sock rideTunes.asgi:application
gunicorn --workers 3 --bind 0.0.0.0:8000 rideTunes.wsgi
gunicorn --workers 3 --timeout 60 --bind 0.0.0.0:8000 rideTunes.wsgi
celery -A rideTunes worker --loglevel=info
cd /etc/nginx/sites-available/
nano ~/.bashrc
source ~/.bashrc
sudo netstat -tulnp | grep :8000
sudo kill 319965
python manage.py flush
"""

from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv
import os
import django_heroku
import dj_database_url
import environ

load_dotenv()

# Initialize the environ object
env = environ.Env()

# Read the .env file, if it exists
environ.Env.read_env()

if os.environ.get('PORT'):  # check if the PORT environment variable is set
    port = int(os.environ.get('PORT'))  # if yes, get the value and convert it to an integer
else:
    port = int(os.environ.get('PORT', 8080))

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SESSION_COOKIE_SECURE = True

# Celery configurations
CELERY_BROKER_URL = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# React app build directory
REACT_APP_DIR = os.path.join('fe-ride_tunes', 'public')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)vrph=*00771b505gcj@s@nm^%0==dm18l0fz0!3!f1h*n4(9w'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

if os.environ.get('USE_CLOUD_RUN') == 'true':
    ALLOWED_HOSTS = ['*']
else:
    # ALLOWED_HOSTS = ['localhost', '127.0.0.1', '192.168.86.28','0.0.0.0']
    ALLOWED_HOSTS = ['.herokuapp.com', 'localhost', '127.0.0.1','app.sharetunez.me']

# ALLOWED_REDIRECT_HOSTS = ['sharetunez']

ASGI_APPLICATION = 'rideTunes.routing.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'social_django',
    'music',
    'channels',
]



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.common.CommonMiddleware',
]

LOGIN_URL = '/music/login/'


CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
]

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
]

CSRF_COOKIE_NAME = "csrftoken"

CSRF_COOKIE_SECURE = False

CSRF_COOKIE_HTTPONLY = False

CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_WHITELIST = [
    "http://localhost:3000",
]

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'social_core.backends.spotify.SpotifyOAuth2',
    'social_core.backends.apple.AppleIdAuth',
    'social_core.backends.google.GoogleOAuth2',
)

SESSION_COOKIE_SAMESITE = None

ROOT_URLCONF = 'rideTunes.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'rideTunes.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'HOST': '34.66.211.148',
#         'PORT': '3306',
#         'NAME': os.environ.get('DB_NAME'),
#         'USER': os.environ.get('DB_USER'),
#         'PASSWORD': os.environ.get('DB_PASSWORD'),
#         'OPTIONS': {
#             'charset': 'utf8mb4',
#             'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
#         },
#     }
# }

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": str(BASE_DIR / "db.sqlite3"),
    }
}



# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# CORS_ORIGIN_ALLOW_ALL = False

LOGIN_REDIRECT_URL = '/'



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# settings.py
SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    # 'social_core.pipeline.social_auth.social_user',
    'music.pipeline.social_user', 
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    'music.pipeline.save_music_service',  # Add this line
    'music.pipeline.set_provider_to_session',  # Add this line

)

# Replace "myapp" with your app's name

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': ()
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}


SOCIAL_AUTH_SPOTIFY_KEY = os.environ.get('SPOTIFY_KEY')
SOCIAL_AUTH_SPOTIFY_SECRET = os.environ.get('SPOTIFY_SECRET')
SOCIAL_AUTH_SPOTIFY_SCOPE = ['playlist-modify-public', 'playlist-modify-private','playlist-read-private','user-read-playback-state','user-library-read'] # Add this line
SOCIAL_AUTH_APPLE_ID_CLIENT = 'com.sharetunez.me.sharetunez' 
SOCIAL_AUTH_APPLE_ID_KEY = os.environ.get('APPLE_KEY')
SOCIAL_AUTH_APPLE_ID_SECRET = """
-----BEGIN PRIVATE KEY-----
MIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQgCEn8atIchRv7Xgmo
agXEwaPTNn2pkfwFhrP35q/yz+OgCgYIKoZIzj0DAQehRANCAASZvc7/bCgOJ3cU
ZUt9ZrYsvAIiemUYoI/Q4/WNjcWvXNyLwGaQPU7/eJPwwoC0ly43vV47xhbTHhpF
VY2HIf54
-----END PRIVATE KEY-----
"""
SOCIAL_AUTH_APPLE_ID_SCOPE = ['name', 'email']
SOCIAL_AUTH_APPLE_ID_TEAM = os.environ.get('APPLE_TEAM_ID')
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.environ.get('GOOGLE_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.environ.get('GOOGLE_SECRET')
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/music/after-auth/'

SOCIAL_AUTH_SPOTIFY_AUTH_EXTRA_ARGUMENTS = {
    'show_dialog': True
}


SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    'openid',
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/userinfo.profile',
    'https://www.googleapis.com/auth/youtube.force-ssl',
]

SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS = {
    'access_type': 'offline',      # Requests a refresh token
    'approval_prompt': 'force',    # Forces re-approval to get a new refresh token each time
}

django_heroku.settings(locals())